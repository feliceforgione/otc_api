{
	"info": {
		"_postman_id": "5620c99b-952c-4d05-9dc4-f90706071cdd",
		"name": "otc API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20496691"
	},
	"item": [
		{
			"name": "Health GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.text();\r",
							"    pm.expect(response).equal(\"OK. API up and running.\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/health",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const reqBody = JSON.parse(request.data);\r",
							"    pm.environment.set(\"email\", reqBody.email);\r",
							"    pm.environment.set(\"password\", reqBody.password);\r",
							"    pm.expect(response).to.have.property(\"message\", \"Successful Registration\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const user = response.user;\r",
							"    pm.expect(user).to.have.property(\"firstName\", \"Jane\")\r",
							"    pm.expect(user).to.have.property(\"lastName\", \"Doe\")\r",
							"    pm.expect(user).to.have.property(\"address\", \"123 Main St\")\r",
							"    pm.expect(user).to.have.property(\"city\", \"New York\")\r",
							"    pm.expect(user).to.have.property(\"state\", \"NY\")\r",
							"    pm.expect(user).to.have.property(\"zipcode\", \"10956\")    \r",
							"    pm.expect(user).to.have.property(\"email\",pm.environment.get(\"email\") )\r",
							"    pm.expect(user).to.have.property(\"password\", null)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Jane\",\r\n    \"lastName\": \"Doe\",\r\n    \"address\": \"123 Main St\",\r\n    \"city\": \"New York\",\r\n    \"state\":\"NY\",\r\n    \"zipcode\": \"10956\",\r\n    \"email\": \"jane{{$guid}}@gmail.com\",\r\n    \"password\":\"123\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register POST - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(501)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const error = pm.response.json().error;\r",
							"    const reqBody = JSON.parse(request.data);\r",
							"    pm.expect(error).to.have.property(\"message\", \"User exists, try loggin in\")\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Jane\",\r\n    \"lastName\": \"Doe\",\r\n    \"address\": \"123 Main St\",\r\n    \"city\": \"New York\",\r\n    \"state\":\"NY\",\r\n    \"zipcode\": \"10956\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\":\"123\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.environment.set(\"token\", response.token)\r",
							"    pm.expect(response).to.have.property(\"message\", \"Login Successful\")\r",
							"    pm.expect(response).to.have.property(\"logged\", true)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const user = response.user;\r",
							"    pm.expect(user).to.have.property(\"firstName\", \"Jane\")\r",
							"    pm.expect(user).to.have.property(\"lastName\", \"Doe\")\r",
							"    pm.expect(user).to.have.property(\"address\", \"123 Main St\")\r",
							"    pm.expect(user).to.have.property(\"city\", \"New York\")\r",
							"    pm.expect(user).to.have.property(\"state\", \"NY\")\r",
							"    pm.expect(user).to.have.property(\"zipcode\", \"10956\")    \r",
							"    pm.expect(user).to.have.property(\"email\",pm.environment.get(\"email\") )\r",
							"    pm.expect(user).to.have.property(\"password\", null)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login POST - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(501)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {    \r",
							"    const error = pm.response.json().error\r",
							"    pm.expect(error).to.have.property(\"message\", \"Authentication Failed: Unable to find user\")\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"me@me.com\",\r\n    \"password\": \"none\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Products POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const reqBody = JSON.parse(request.data);\r",
							"    pm.environment.set(\"upc\", reqBody.upc);\r",
							"    pm.environment.set(\"title\", reqBody.title);\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product added\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.environment.set(\"productId\", result._id);\r",
							"    pm.expect(result).to.have.property(\"title\", pm.environment.get(\"title\"))\r",
							"    pm.expect(result).to.have.property(\"upc\", pm.environment.get(\"upc\"))\r",
							"    pm.expect(result).to.have.property(\"brand\", \"brand\")\r",
							"    pm.expect(result).to.have.property(\"manufacturer\", \"manufacturer\")\r",
							"    pm.expect(result).to.have.property(\"description\", \"description\")\r",
							"    pm.expect(result).to.have.property(\"description_html\", \"description_full\")\r",
							"    pm.expect(result).to.have.property(\"description_full_html\", \"desctiption html\")\r",
							"    pm.expect(result).to.have.property(\"ratings_total\", 100)\r",
							"    pm.expect(result).to.have.property(\"ratings\", 10.75)\r",
							"    pm.expect(result).to.have.property(\"price\", 19.82)\r",
							"    pm.expect(result).to.have.property(\"dimensions\", \"3.75 x 1.56 x 3.12 Inches\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"link\", \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98c\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"id\", \"123456\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"zoomable\", false)\r",
							"    pm.expect(result.images[0]).to.have.property(\"main_image\", true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"brand\": \"brand\",\r\n  \"manufacturer\": \"manufacturer\",\r\n  \"title\": \"title-{{$guid}}\",\r\n  \"upc\": \"upc-{{$guid}}\",\r\n  \"description\": \"description\",\r\n  \"description_html\": \"description_full\",\r\n  \"description_full_html\": \"desctiption html\",\r\n  \"ratings_total\": 100,\r\n  \"ratings\": 10.75,\r\n  \"images\": [{\r\n      \"link\": \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98c\",\r\n      \"id\": \"123456\",\r\n      \"zoomable\": false,\r\n      \"main_image\": true\r\n  }],\r\n  \"dimensions\": \"3.75 x 1.56 x 3.12 Inches\",\r\n  \"price\": 19.82,\r\n  \"in_stock\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Products POST - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(501)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json().error;\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product already exists\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"brand\": \"brand\",\r\n  \"manufacturer\": \"manufacturer\",\r\n  \"title\": \"{{title}}\",\r\n  \"upc\": \"{{upc}}\",\r\n  \"description\": \"description\",\r\n  \"description_html\": \"description_full\",\r\n  \"description_full_html\": \"desctiption html\",\r\n  \"ratings_total\": 100,\r\n  \"ratings\": 10.75\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Products GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Products\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result[0]).to.have.property(\"title\")\r",
							"    pm.expect(result[0]).to.have.property(\"upc\")\r",
							"    pm.expect(result[0]).to.have.property(\"brand\")\r",
							"    pm.expect(result[0]).to.have.property(\"manufacturer\")\r",
							"    pm.expect(result[0]).to.have.property(\"description\")\r",
							"    pm.expect(result[0]).to.have.property(\"description_html\")\r",
							"    pm.expect(result[0]).to.have.property(\"description_full_html\")\r",
							"    pm.expect(result[0]).to.have.property(\"ratings_total\")\r",
							"    pm.expect(result[0]).to.have.property(\"ratings\")\r",
							"    pm.expect(result[0]).to.have.property(\"price\", 19.82)\r",
							"    pm.expect(result[0]).to.have.property(\"dimensions\", \"3.75 x 1.56 x 3.12 Inches\")\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"link\", \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98c\")\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"id\", \"123456\")\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"zoomable\", false)\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"main_image\", true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Products GET with Search Query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Products\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result[0]).to.have.property(\"title\")\r",
							"    pm.expect(result[0]).to.have.property(\"upc\")\r",
							"    pm.expect(result[0]).to.have.property(\"brand\")\r",
							"    pm.expect(result[0]).to.have.property(\"manufacturer\")\r",
							"    pm.expect(result[0]).to.have.property(\"description\")\r",
							"    pm.expect(result[0]).to.have.property(\"description_html\")\r",
							"    pm.expect(result[0]).to.have.property(\"description_full_html\")\r",
							"    pm.expect(result[0]).to.have.property(\"ratings_total\")\r",
							"    pm.expect(result[0]).to.have.property(\"ratings\")\r",
							"    pm.expect(result[0]).to.have.property(\"price\", 19.82)\r",
							"    pm.expect(result[0]).to.have.property(\"dimensions\", \"3.75 x 1.56 x 3.12 Inches\")\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"link\", \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98c\")\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"id\", \"123456\")\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"zoomable\", false)\r",
							"    pm.expect(result[0].images[0]).to.have.property(\"main_image\", true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/?search=html&pageSize=2&page=0&sort=-_id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						""
					],
					"query": [
						{
							"key": "search",
							"value": "html"
						},
						{
							"key": "pageSize",
							"value": "2"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "-_id"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Product By Id GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product found\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"title\", pm.environment.get(\"title\"))\r",
							"    pm.expect(result).to.have.property(\"upc\", pm.environment.get(\"upc\"))\r",
							"    pm.expect(result).to.have.property(\"brand\", \"brand\")\r",
							"    pm.expect(result).to.have.property(\"manufacturer\", \"manufacturer\")\r",
							"    pm.expect(result).to.have.property(\"description\", \"description\")\r",
							"    pm.expect(result).to.have.property(\"description_html\", \"description_full\")\r",
							"    pm.expect(result).to.have.property(\"description_full_html\", \"desctiption html\")\r",
							"    pm.expect(result).to.have.property(\"ratings_total\", 100)\r",
							"    pm.expect(result).to.have.property(\"ratings\", 10.75)\r",
							"    pm.expect(result).to.have.property(\"price\", 19.82)\r",
							"    pm.expect(result).to.have.property(\"dimensions\", \"3.75 x 1.56 x 3.12 Inches\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"link\", \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98c\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"id\", \"123456\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"zoomable\", false)\r",
							"    pm.expect(result.images[0]).to.have.property(\"main_image\", true)\r",
							"    \r",
							"    \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{productId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product By Id GET - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(500)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json().error;\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product not found\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/642d21e21e4a4ddb1610222a",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"642d21e21e4a4ddb1610222a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Products PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product Updated\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"title\", \"title1\")\r",
							"    pm.expect(result).to.have.property(\"upc\", \"upc1\")\r",
							"    pm.expect(result).to.have.property(\"brand\", \"brand1\")\r",
							"    pm.expect(result).to.have.property(\"manufacturer\", \"manufacturer1\")\r",
							"    pm.expect(result).to.have.property(\"description\", \"description1\")\r",
							"    pm.expect(result).to.have.property(\"description_html\", \"description_full1\")\r",
							"    pm.expect(result).to.have.property(\"description_full_html\", \"desctiption html1\")\r",
							"    pm.expect(result).to.have.property(\"ratings_total\", 101)\r",
							"    pm.expect(result).to.have.property(\"ratings\", 11)\r",
							"    pm.expect(result).to.have.property(\"price\", 20)\r",
							"    pm.expect(result).to.have.property(\"dimensions\", \"3.75 x 1.56 x 4.12 Inches\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"link\", \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98cd\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"id\", \"1234567\")\r",
							"    pm.expect(result.images[0]).to.have.property(\"zoomable\", true)\r",
							"    pm.expect(result.images[0]).to.have.property(\"main_image\", false)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"brand\": \"brand1\",\r\n  \"manufacturer\": \"manufacturer1\",\r\n  \"title\": \"title1\",\r\n  \"upc\": \"upc1\",\r\n  \"description\": \"description1\",\r\n  \"description_html\": \"description_full1\",\r\n  \"description_full_html\": \"desctiption html1\",\r\n  \"ratings_total\": 101,\r\n  \"ratings\": 11,\r\n  \"images\": [{\r\n      \"link\": \"https://plus.unsplash.com/premium_photo-1668446396629-43f49cc4f98cd\",\r\n      \"id\": \"1234567\",\r\n      \"zoomable\": true,\r\n      \"main_image\": false\r\n  }],\r\n  \"dimensions\": \"3.75 x 1.56 x 4.12 Inches\",\r\n  \"price\": 20.00,\r\n  \"in_stock\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/{{productId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Products PUT - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(500)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json().error;\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product not found\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/642d21e21e4a4ddb1610222a",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"642d21e21e4a4ddb1610222a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const reqBody = JSON.parse(request.data);\r",
							"    pm.environment.set(\"categoryName\", reqBody.name);\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category added\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.environment.set(\"categoryId\", result._id);\r",
							"    pm.expect(result).to.have.property(\"name\", pm.environment.get(\"categoryName\"))\r",
							"    pm.expect(result).to.have.property(\"icon\", \"linktopic.com\")\r",
							"    pm.expect(result).to.have.property(\"slug\", \"cold-slug\")\r",
							"  \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Cold-{{$guid}}\",\r\n  \"productIds\": [\"{{productId}}\"],\r\n  \"icon\": \"linktopic.com\",\r\n   \"slug\": \"cold-slug\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/category/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Category POST - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(501)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json().error;\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category already exists\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{categoryName}}\",\r\n  \"icon\": \"linktopic.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/category/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Category GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Categories\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result[0]).to.have.property(\"name\")\r",
							"    pm.expect(result[0]).to.have.property(\"productIds\")\r",
							"    pm.expect(result[0]).to.have.property(\"icon\")\r",
							"    pm.expect(result[0]).to.have.property(\"slug\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/category/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Category By Id GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category found\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"name\", pm.environment.get(\"categoryName\"))\r",
							"    pm.expect(result).to.have.property(\"icon\", \"linktopic.com\")\r",
							"    pm.expect(result).to.have.property(\"slug\", \"cold-slug\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/category/{{categoryId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						"{{categoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Products by Category Id GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category found\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"name\", pm.environment.get(\"categoryName\"))\r",
							"    pm.expect(result).to.have.property(\"icon\", \"linktopic.com\")    \r",
							"    pm.expect(result).to.have.property(\"slug\", \"cold-slug\")    \r",
							"    pm.expect(result.productIds[0]).to.have.property(\"brand\")\r",
							"    pm.expect(result.productIds[0]).to.have.property(\"title\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/category/{{categoryId}}/products?sort=_id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						"{{categoryId}}",
						"products"
					],
					"query": [
						{
							"key": "sort",
							"value": "_id"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Category By Id GET - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(500)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json().error;\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category not found\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/category/642d21e21e4a4ddb1610222a",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						"642d21e21e4a4ddb1610222a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category Updated\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"name\", \"Cold1\")\r",
							"    pm.expect(result).to.have.property(\"icon\", \"linktopic.com1\")\r",
							"    pm.expect(result.productIds).to.be.an(\"array\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Cold1\",\r\n  \"productIds\": [\"{{productId}}\", \"{{productId}}\"],\r\n  \"icon\": \"linktopic.com1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/category/{{categoryId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						"{{categoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category PUT - BAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(500)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json().error;\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category not found\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/category/642d21e21e4a4ddb1610222a",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						"642d21e21e4a4ddb1610222a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Category Deleted\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"_id\", pm.environment.get(\"categoryId\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/category/{{categoryId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"category",
						"{{categoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Products DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Test Message\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\", \"Product Deleted\")\r",
							"})\r",
							"\r",
							"pm.test(\"Test Payload\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const result = response.result;\r",
							"    pm.expect(result).to.have.property(\"_id\", pm.environment.get(\"productId\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{productId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		}
	]
}